[
  {
    "question": "Find the driver with the most race entries overall.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS races FROM results r JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId ORDER BY races DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results) RETURN d.forename + ' ' + d.surname AS driver, count(r) AS races ORDER BY races DESC LIMIT 1;"
  },
  {
    "question": "List the top 5 circuits with the most races.",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races r JOIN circuits c ON r.circuitId = c.circuitId GROUP BY c.circuitId ORDER BY race_count DESC LIMIT 5;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC LIMIT 5;"
  },
  {
    "question": "List all drivers who have driven for both Ferrari and McLaren.",
    "sql": "SELECT d.forename, d.surname FROM drivers d WHERE d.driverId IN (SELECT DISTINCT r1.driverId FROM results r1 JOIN constructors c1 ON r1.constructorId = c1.constructorId WHERE c1.name = 'Ferrari') AND d.driverId IN (SELECT DISTINCT r2.driverId FROM results r2 JOIN constructors c2 ON r2.constructorId = c2.constructorId WHERE c2.name = 'McLaren');",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r1:results)<-[:ACHIEVED]-(c1:constructors {name: 'Ferrari'}) MATCH (d)-[:ACHIEVED]->(r2:results)<-[:ACHIEVED]-(c2:constructors {name: 'McLaren'}) RETURN DISTINCT d.forename + ' ' + d.surname AS driver;"
  },
  {
    "question": "Find the driver with the highest number of races started.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS starts FROM results r JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId ORDER BY starts DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results) RETURN d.forename + ' ' + d.surname AS driver, count(r) AS starts ORDER BY starts DESC LIMIT 1;"
  },
  {
    "question": "Get the average race position of driver 'Lewis Hamilton' in 2018.",
    "sql": "SELECT AVG(r.position) FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.year = 2018;",
    "cypher": "MATCH (d:drivers {forename: 'Lewis', surname: 'Hamilton'})-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races {year: 2018}) RETURN avg(toFloat(r.position)) AS avg_position;"
  },
  {
    "question": "List the drivers with at least 100 starts.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS starts FROM results r JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId HAVING COUNT(*) >= 100;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results) WITH d, count(r) AS starts WHERE starts >= 100 RETURN d.forename + ' ' + d.surname AS driver, starts;"
  },
  {
    "question": "List the drivers who scored points in every race of 2020.",
    "sql": "SELECT d.forename, d.surname FROM drivers d WHERE d.driverId IN (SELECT r.driverId FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2020 GROUP BY r.driverId HAVING COUNT(*) = (SELECT COUNT(*) FROM races WHERE year = 2020) AND MIN(r.points) > 0);",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races {year: 2020}) WITH d, collect(r.points) AS points, count(r) AS race_count MATCH (totalRaces:races {year: 2020}) WITH d, points, race_count, count(totalRaces) AS total_races WHERE race_count = total_races AND all(p IN points WHERE p > 0) RETURN d.forename + ' ' + d.surname AS driver;"
  },
  {
    "question": "Show the number of races held at each circuit.",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races r JOIN circuits c ON r.circuitId = c.circuitId GROUP BY c.circuitId ORDER BY race_count DESC;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC;"
  },
  {
    "question": "Find the circuit that has hosted the most races.",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races r JOIN circuits c ON r.circuitId = c.circuitId GROUP BY c.circuitId ORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC LIMIT 1;"
  },
  {
    "question": "Find the race with the most drivers classified as DNF.",
    "sql": "SELECT ra.year, ra.name, COUNT(*) AS dnfs FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE r.position IS NULL GROUP BY ra.raceId ORDER BY dnfs DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:IN_RACE]->(ra:races) WHERE r.position IS NULL RETURN ra.year, ra.name, count(r) AS dnfs ORDER BY dnfs DESC LIMIT 1;"
  },
  {
    "question": "List the constructors who scored at least 1 point in every race of 2020.",
    "sql": "SELECT c.name FROM constructors c WHERE c.constructorId IN (SELECT r.constructorId FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2020 GROUP BY r.constructorId HAVING MIN(r.points) > 0);",
    "cypher": "MATCH (c:constructors)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races {year: 2020}) WITH c, collect(r.points) AS points WHERE all(p IN points WHERE p > 0) RETURN c.name;"
  },
  {
    "question": "List the top 10 drivers with the most career starts.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS starts FROM results r JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId ORDER BY starts DESC LIMIT 10;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results) RETURN d.forename + ' ' + d.surname AS driver, count(r) AS starts ORDER BY starts DESC LIMIT 10;"
  },
  {
    "question": "Show the number of drivers per surname initial, use aliases initial and count.",
    "sql": "SELECT SUBSTR(surname, 1, 1) AS initial, COUNT(*) AS count FROM drivers GROUP BY initial;",
    "cypher": "MATCH (d:drivers) RETURN left(d.surname, 1) AS initial, COUNT(d) AS count;"
  },
  {
    "question": "Show the number of races per constructorId.",
    "sql": "SELECT constructorId, COUNT(*) FROM results GROUP BY constructorId;",
    "cypher": "MATCH (c:constructors)-[:ACHIEVED]->(r:results) RETURN c.constructorId, COUNT(r);"
  },
  {
    "question": "Find the year that had the most races, usee alias race_count.",
    "sql": "SELECT ra.year, COUNT(*) AS race_count FROM races ra GROUP BY ra.year ORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (ra:races) RETURN ra.year, COUNT(ra) AS race_count ORDER BY race_count DESC LIMIT 1;"
  }
]