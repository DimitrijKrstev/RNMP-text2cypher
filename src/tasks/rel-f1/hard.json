[
  {
    "question": "Find the driver who scored the most points in a single race without winning. Return driver, race, points.",
    "sql": "SELECT d.forename, d.surname, ra.year, ra.name, r.points\nFROM results r JOIN races ra ON r.raceId=ra.raceId JOIN drivers d ON d.driverId=r.driverId\nWHERE r.positionOrder<>1 ORDER BY r.points DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(res:results)-[:IN_RACE]->(r:races)\nWHERE res.points IS NOT NULL AND res.positionOrder IS NOT NULL AND res.positionOrder <> 1\nRETURN d AS driver, r AS race, res.points AS points"
  },
  {
    "question": "Determine which constructor showed the largest positive season-over-season jump in total points? Return constructor, from_year, to_year, and points_delta.",
    "sql": "WITH season_points AS (\n  SELECT ra.year, r.constructorId, SUM(r.points) AS pts\n  FROM results r\n  JOIN races ra ON ra.raceId = r.raceId\n  GROUP BY ra.year, r.constructorId\n), deltas AS (\n  SELECT sp2.constructorId, sp1.year AS from_year, sp2.year AS to_year, (sp2.pts - sp1.pts) AS delta\n  FROM season_points sp1\n  JOIN season_points sp2\n    ON sp2.constructorId = sp1.constructorId AND sp2.year = sp1.year + 1\n)\nSELECT c.name AS constructor, d.from_year, d.to_year, d.delta AS points_delta\nFROM deltas d\nJOIN constructors c ON c.constructorId = d.constructorId\nORDER BY points_delta DESC\nLIMIT 1;",
    "cypher": "MATCH (c:constructors)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)\nWITH c, ra.year AS year, sum(toFloat(r.points)) AS pts\nORDER BY c, year\nWITH c, collect({year: year, pts: pts}) AS seasons\nUNWIND range(0, size(seasons)-2) AS i\nWITH c, seasons[i] AS s1, seasons[i+1] AS s2\nWITH c, s1.year AS from_year, s2.year AS to_year, (s2.pts - s1.pts) AS points_delta\nRETURN c.name AS constructor, from_year, to_year, points_delta\nORDER BY points_delta DESC\nLIMIT 1;"
  },
  {
    "question": "Find the driver with the highest career win-to-start ratio (min 50 starts). Return driver and ratio.",
    "sql": "SELECT d.forename, d.surname, (1.0*SUM(CASE WHEN r.positionOrder=1 THEN 1 ELSE 0 END)/COUNT(*)) AS ratio\nFROM results r JOIN drivers d ON r.driverId=d.driverId\nGROUP BY d.driverId HAVING COUNT(*)>=50\nORDER BY ratio DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)\nWITH d, count(r) AS starts, count(CASE WHEN r.positionOrder=1 THEN 1 END) AS wins\nWHERE starts>=50\nRETURN d.forename + ' ' + d.surname AS driver, (1.0*wins/starts) AS ratio ORDER BY ratio DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who started most races from last grid position. Return driver and count.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS cnt\nFROM results r JOIN drivers d ON r.driverId=d.driverId\nJOIN races ra ON r.raceId=ra.raceId\nWHERE r.grid=(SELECT MAX(grid) FROM results WHERE raceId=ra.raceId)\nGROUP BY d.driverId ORDER BY cnt DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)\nWITH ra, max(r.grid) AS last\nMATCH (d:drivers)-[:ACHIEVED]->(res:results {grid:last})-[:IN_RACE]->(ra)\nRETURN d.forename + ' ' + d.surname AS driver, count(res) AS cnt ORDER BY cnt DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who has competed in the most different circuits. Return driver and circuit_count.",
    "sql": "SELECT d.forename, d.surname, COUNT(DISTINCT ra.circuitId) AS circuit_count\nFROM results r JOIN races ra ON r.raceId=ra.raceId JOIN drivers d ON r.driverId=d.driverId\nGROUP BY d.driverId ORDER BY circuit_count DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)-[:HELD_AT]->(c:circuits)\nWITH d, collect(DISTINCT c) AS circuits\nRETURN d.forename + ' ' + d.surname AS driver, size(circuits) AS circuit_count ORDER BY circuit_count DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who has been overtaken the most times (grid better than finish). Return driver and overtakes_suffered.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS overtakes_suffered\nFROM results r JOIN drivers d ON r.driverId=d.driverId\nWHERE r.grid<r.positionOrder\nGROUP BY d.driverId ORDER BY overtakes_suffered DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)\nWHERE r.grid<r.positionOrder\nRETURN d.forename + ' ' + d.surname AS driver, count(r) AS overtakes_suffered ORDER BY overtakes_suffered DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who has finished last the most times. Return driver and count.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS cnt\nFROM results r JOIN drivers d ON r.driverId=d.driverId\nJOIN races ra ON ra.raceId=ra.raceId\nWHERE r.positionOrder=(SELECT MAX(positionOrder) FROM results WHERE raceId=ra.raceId)\nGROUP BY d.driverId ORDER BY cnt DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)\nWITH ra, max(r.positionOrder) AS last\nMATCH (d:drivers)-[:ACHIEVED]->(res:results {positionOrder:last})-[:IN_RACE]->(ra)\nRETURN d.forename + ' ' + d.surname AS driver, count(res) AS cnt ORDER BY cnt DESC LIMIT 1;"
  },
  {
    "question": "Which driver has the highest win percentage in a single season (min 5 races)? Return driver, year, and win_percentage.",
    "sql": "WITH season_stats AS (\n  SELECT ra.year, r.driverId,\n         COUNT(*) FILTER (WHERE r.positionOrder = 1) AS wins,\n         COUNT(*) AS starts\n  FROM results r\n  JOIN races ra ON ra.raceId = r.raceId\n  GROUP BY ra.year, r.driverId\n)\nSELECT d.forename || ' ' || d.surname AS driver, ss.year,\n       ROUND(1.0*ss.wins/ss.starts*100,2) AS win_percentage\nFROM season_stats ss\nJOIN drivers d ON d.driverId = ss.driverId\nWHERE ss.starts >= 5\nORDER BY win_percentage DESC\nLIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)\nWITH d, ra.year AS year, count(r) AS starts, count(CASE WHEN r.positionOrder=1 THEN 1 END) AS wins\nWHERE starts >= 5\nWITH d, year, 100.0*wins/starts AS win_percentage\nRETURN d.forename + ' ' + d.surname AS driver, year, round(win_percentage,2) AS win_percentage\nORDER BY win_percentage DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most races entered before their first career win. Return driver and race_count.",
    "sql": "WITH starts AS (\n  SELECT r.driverId, COUNT(*) AS races FROM results r GROUP BY r.driverId\n), wins AS (\n  SELECT r.driverId, MIN(ra.year*100+ra.round) AS first_win\n  FROM results r JOIN races ra ON r.raceId=ra.raceId\n  WHERE r.positionOrder=1 GROUP BY r.driverId\n)\nSELECT d.forename, d.surname, s.races AS race_count\nFROM starts s JOIN wins w ON s.driverId=w.driverId JOIN drivers d ON d.driverId=s.driverId\nORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)\nWITH d, count(r) AS races, min(CASE WHEN r.positionOrder=1 THEN ra.year*100+ra.round END) AS first_win\nRETURN d.forename + ' ' + d.surname AS driver, races AS race_count ORDER BY race_count DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who has finished last the most times in a single season. Return driver, year, and last_place_finishes.",
    "sql": "SELECT d.forename, d.surname, ra.year, COUNT(*) AS last_place_finishes\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE r.positionOrder = (\n    SELECT MAX(r2.positionOrder)\n    FROM results r2\n    WHERE r2.raceId = ra.raceId\n)\nGROUP BY d.driverId, ra.year\nORDER BY last_place_finishes DESC\nLIMIT 1;",
    "cypher": "MATCH (d:drivers)-[:ACHIEVED]->(r:results)-[:IN_RACE]->(ra:races)\nWITH ra, max(r.positionOrder) AS lastPos\nMATCH (d)-[:ACHIEVED]->(res:results {positionOrder:lastPos})-[:IN_RACE]->(ra)\nWITH d, ra.year AS year, count(res) AS last_place_finishes\nRETURN d.forename + ' ' + d.surname AS driver, year, last_place_finishes\nORDER BY last_place_finishes DESC\nLIMIT 1;"
  }
]