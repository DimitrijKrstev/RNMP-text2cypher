[
  {
    "question": "Find the driver with the most wins in a single season.",
    "sql": "SELECT d.forename, d.surname, ra.year, COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 1 GROUP BY d.driverId, ra.year ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND r.position = 1 WITH d.driverId, ra.year RETURN d.forename, d.surname, ra.year, count(r) AS wins ORDER BY wins;"
  },
  {
    "question": "List the top 5 constructors with the most wins overall.",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId WHERE r.position = 1 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 5;",
    "cypher": "MATCH (r:results), (c:constructors) WHERE (r)-[:BY_CONSTRUCTOR]->(c) AND r.position = 1 WITH c.constructorId RETURN c.name, count(r) AS wins ORDER BY wins;"
  },
  {
    "question": "Show the average finishing position of 'Sebastian Vettel' across his career.",
    "sql": "SELECT AVG(r.position) FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Sebastian' AND d.surname = 'Vettel';",
    "cypher": "MATCH (r:results), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND d.forename = 'Sebastian' AND d.surname = 'Vettel' RETURN AVG(r.position);"
  },
  {
    "question": "Find all drivers who have won races with more than one constructor.",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN constructors c ON r.constructorId = c.constructorId WHERE r.position = 1 GROUP BY d.driverId HAVING COUNT(DISTINCT c.constructorId) > 1;",
    "cypher": "MATCH (r:results), (d:drivers), (c:constructors) WHERE (r)-[:DRIVEN_BY]->(d) AND (r)-[:BY_CONSTRUCTOR]->(c) AND r.position = 1 WITH d.driverId WITH COUNT(DISTINCT c.constructorId) > 1 RETURN d.forename, d.surname;"
  },
  {
    "question": "Get the total number of podium finishes (position 1\u20133) for 'Fernando Alonso'.",
    "sql": "SELECT COUNT(*) FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Fernando' AND d.surname = 'Alonso' AND r.position BETWEEN 1 AND 3;",
    "cypher": "MATCH (r:results), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND d.forename = 'Fernando' AND d.surname = 'Alonso' AND r.position >= 1 AND r.position <= 3 RETURN count(r);"
  },
  {
    "question": "Show the circuit where 'Michael Schumacher' has the most wins.",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND r.position = 1 GROUP BY c.circuitId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results), (ra:races), (c:circuits), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (ra)-[:HELD_AT]->(c) AND (r)-[:DRIVEN_BY]->(d) AND d.forename = 'Michael' AND d.surname = 'Schumacher' AND r.position = 1 WITH c.circuitId RETURN c.name, count(r) AS wins ORDER BY wins;"
  },
  {
    "question": "List the drivers with more than 50 career podiums.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS podiums FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.position BETWEEN 1 AND 3 GROUP BY d.driverId HAVING COUNT(*) > 50 ORDER BY podiums DESC;",
    "cypher": "MATCH (r:results), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND r.position >= 1 AND r.position <= 3 WITH d.driverId WITH COUNT(*) > 50 RETURN d.forename, d.surname, count(r) AS podiums ORDER BY podiums;"
  },
  {
    "question": "Find the constructor with the most pole positions.",
    "sql": "SELECT c.name, COUNT(*) AS poles FROM qualifying q JOIN constructors c ON q.constructorId = c.constructorId WHERE q.position = 1 GROUP BY c.constructorId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying), (c:constructors) WHERE (q)-[:FOR_CONSTRUCTOR]->(c) AND q.position = 1 WITH c.constructorId RETURN c.name, count(q) AS poles ORDER BY q.poles;"
  },
  {
    "question": "Show the drivers who have achieved fastest laps in more than 20 races.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS fastest_laps FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.rank = 1 GROUP BY d.driverId HAVING COUNT(*) > 20 ORDER BY fastest_laps DESC;",
    "cypher": "MATCH (r:results), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND r.rank = 1 WITH d.driverId WITH COUNT(*) > 20 RETURN d.forename, d.surname, count(r) AS fastest_laps ORDER BY fastest_laps;"
  },
  {
    "question": "List the seasons where Ferrari won more than 5 races.",
    "sql": "SELECT ra.year, COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN constructors c ON r.constructorId = c.constructorId WHERE c.name = 'Ferrari' AND r.position = 1 GROUP BY ra.year HAVING COUNT(*) > 5 ORDER BY ra.year;",
    "cypher": "MATCH (r:results), (ra:races), (c:constructors) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:BY_CONSTRUCTOR]->(c) AND c.name = 'Ferrari' AND r.position = 1 WITH ra.year WITH COUNT(*) > 5 RETURN ra.year, count(r) AS wins ORDER BY ra.year;"
  },
  {
    "question": "Find the driver with the highest average grid position in 2019.",
    "sql": "SELECT d.forename, d.surname, AVG(q.position) AS avg_grid FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE ra.year = 2019 GROUP BY d.driverId ORDER BY avg_grid ASC LIMIT 1;",
    "cypher": "MATCH (q:qualifying), (d:drivers), (ra:races) WHERE (q)-[:FOR_DRIVER]->(d) AND (q)-[:FOR_RACE]->(ra) AND ra.year = 2019 WITH d.driverId RETURN d.forename, d.surname, AVG(q.position) AS avg_grid ORDER BY q.avg_grid;"
  },
  {
    "question": "Show all circuits where Lewis Hamilton has won at least 5 times.",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.position = 1 GROUP BY c.circuitId HAVING COUNT(*) >= 5;",
    "cypher": "MATCH (r:results), (ra:races), (c:circuits), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (ra)-[:HELD_AT]->(c) AND (r)-[:DRIVEN_BY]->(d) AND d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.position = 1 WITH c.circuitId WITH COUNT(*) >= 5 RETURN c.name, count(r) AS wins;"
  },
  {
    "question": "List constructors with more than 100 podium finishes.",
    "sql": "SELECT c.name, COUNT(*) AS podiums FROM results r JOIN constructors c ON r.constructorId = c.constructorId WHERE r.position BETWEEN 1 AND 3 GROUP BY c.constructorId HAVING COUNT(*) > 100 ORDER BY podiums DESC;",
    "cypher": "MATCH (r:results), (c:constructors) WHERE (r)-[:BY_CONSTRUCTOR]->(c) AND r.position >= 1 AND r.position <= 3 WITH c.constructorId WITH COUNT(*) > 100 RETURN c.name, count(r) AS podiums ORDER BY podiums;"
  },
  {
    "question": "Find the youngest driver to win a race.",
    "sql": "SELECT d.forename, d.surname, MIN(DATEDIFF(ra.date, d.dob)) AS age_at_win FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 1 GROUP BY d.driverId ORDER BY age_at_win ASC LIMIT 1;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND r.position = 1 WITH d.driverId RETURN d.forename, d.surname, MIN(DATEDIFF(ra.date, d.dob)) AS age_at_win ORDER BY age_at_win;"
  },
  {
    "question": "Show the number of races won from pole position.",
    "sql": "SELECT COUNT(*) FROM results r JOIN qualifying q ON r.raceId = q.raceId AND r.driverId = q.driverId WHERE r.position = 1 AND q.position = 1;",
    "cypher": "MATCH (r:results), (q:qualifying) WHERE r.raceId = q.raceId AND r.driverId = q.driverId AND r.position = 1 AND q.position = 1 RETURN count(r);"
  },
  {
    "question": "List the drivers who won the championship and the year.",
    "sql": "SELECT d.forename, d.surname, ra.year FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ds.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year);",
    "cypher": "MATCH (ds:driverStandings), (d:drivers), (ra:races) WHERE ds.driverId = d.driverId AND ds.raceId = ra.raceId AND ds.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year) RETURN d.forename, d.surname, ra.year;"
  },
  {
    "question": "Get the constructors that won the championship and the year.",
    "sql": "SELECT c.name, ra.year FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId JOIN races ra ON cs.raceId = ra.raceId WHERE cs.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year);",
    "cypher": "MATCH (cs:constructorStandings), (c:constructors), (ra:races) WHERE cs.constructorId = c.constructorId AND cs.raceId = ra.raceId AND cs.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year) RETURN c.name, ra.year;"
  },
  {
    "question": "Find drivers who scored points in every race of a season.",
    "sql": "SELECT d.forename, d.surname, ra.year FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE r.points > 0 GROUP BY d.driverId, ra.year HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = ra.year);",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND r.points > 0 WITH d.driverId, ra.year WITH COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = ra.year) RETURN d.forename, d.surname, ra.year;"
  },
  {
    "question": "List the constructors with back-to-back championships.",
    "sql": "SELECT DISTINCT c.name FROM constructorStandings cs1 JOIN constructors c ON cs1.constructorId = c.constructorId JOIN races ra1 ON cs1.raceId = ra1.raceId JOIN constructorStandings cs2 ON cs2.constructorId = c.constructorId JOIN races ra2 ON cs2.raceId = ra2.raceId WHERE cs1.position = 1 AND cs2.position = 1 AND ra2.year = ra1.year + 1;",
    "cypher": "MATCH (cs1:constructorStandings), (c:constructors), (ra1:races), (cs2:constructorStandings), (ra2:races) WHERE cs1.constructorId = c.constructorId AND cs1.raceId = ra1.raceId AND cs2.constructorId = c.constructorId AND cs2.raceId = ra2.raceId AND cs1.position = 1 AND cs2.position = 1 AND ra2.year = ra1.year + 1 RETURN cs1.DISTINCT, c.name;"
  },
  {
    "question": "Find the driver with the most DNFs in 2010.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS dnfs FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2010 AND r.statusId != 1 GROUP BY d.driverId ORDER BY dnfs DESC LIMIT 1;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND ra.year = 2010 AND r.statusId != 1 WITH d.driverId RETURN d.forename, d.surname, count(r) AS dnfs ORDER BY r.dnfs;"
  },
  {
    "question": "Show the top 3 circuits with the most different winners.",
    "sql": "SELECT c.name, COUNT(DISTINCT d.driverId) AS unique_winners FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 1 GROUP BY c.circuitId ORDER BY unique_winners DESC LIMIT 3;",
    "cypher": "MATCH (r:results), (ra:races), (c:circuits), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (ra)-[:HELD_AT]->(c) AND (r)-[:DRIVEN_BY]->(d) AND r.position = 1 WITH c.circuitId RETURN c.name, COUNT(DISTINCT d.driverId) AS unique_winners ORDER BY unique_winners;"
  },
  {
    "question": "List the seasons where McLaren won the championship.",
    "sql": "SELECT ra.year FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId JOIN races ra ON cs.raceId = ra.raceId WHERE cs.position = 1 AND c.name = 'McLaren' AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year);",
    "cypher": "MATCH (cs:constructorStandings), (c:constructors), (ra:races) WHERE cs.constructorId = c.constructorId AND cs.raceId = ra.raceId AND cs.position = 1 AND c.name = 'McLaren' AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year) RETURN ra.year;"
  },
  {
    "question": "Find the driver with the longest career span (first to last race).",
    "sql": "SELECT d.forename, d.surname, MIN(ra.year) AS first_year, MAX(ra.year) AS last_year, (MAX(ra.year) - MIN(ra.year)) AS span FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId ORDER BY span DESC LIMIT 1;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) WITH d.driverId RETURN d.forename, d.surname, MIN(ra.year) AS first_year, MAX(ra.year) AS last_year, (MAX(ra.year) - MIN(ra.year)) AS span ORDER BY r.span;"
  },
  {
    "question": "Show the drivers who have led more than 1000 laps.",
    "sql": "SELECT d.forename, d.surname, SUM(r.laps) AS laps_led FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.positionOrder = 1 GROUP BY d.driverId HAVING SUM(r.laps) > 1000 ORDER BY laps_led DESC;",
    "cypher": "MATCH (r:results), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND r.positionOrder = 1 WITH d.driverId WITH SUM(r.laps) > 1000 RETURN d.forename, d.surname, SUM(r.laps) AS laps_led ORDER BY laps_led;"
  },
  {
    "question": "Get the constructor with the most wins in the hybrid era (2014 onward).",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year >= 2014 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results), (c:constructors), (ra:races) WHERE (r)-[:BY_CONSTRUCTOR]->(c) AND (r)-[:IN_RACE]->(ra) AND r.position = 1 AND ra.year >= 2014 WITH c.constructorId RETURN c.name, count(r) AS wins ORDER BY wins;"
  },
  {
    "question": "List the drivers with at least one win in 3 different decades.",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 1 GROUP BY d.driverId HAVING COUNT(DISTINCT FLOOR(ra.year/10)) >= 3;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND r.position = 1 WITH d.driverId WITH COUNT(DISTINCT FLOOR(ra.year/10)) >= 3 RETURN d.forename, d.surname;"
  },
  {
    "question": "Show the constructors who have taken at least 200 pole positions.",
    "sql": "SELECT c.name, COUNT(*) AS poles FROM qualifying q JOIN constructors c ON q.constructorId = c.constructorId WHERE q.position = 1 GROUP BY c.constructorId HAVING COUNT(*) >= 200;",
    "cypher": "MATCH (q:qualifying), (c:constructors) WHERE (q)-[:FOR_CONSTRUCTOR]->(c) AND q.position = 1 WITH c.constructorId WITH COUNT(*) >= 200 RETURN c.name, count(q) AS poles;"
  },
  {
    "question": "Find the drivers with the most wins at their home Grand Prix.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 1 AND d.nationality = c.country GROUP BY d.driverId ORDER BY wins DESC LIMIT 5;",
    "cypher": "MATCH (r:results), (ra:races), (c:circuits), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (ra)-[:HELD_AT]->(c) AND (r)-[:DRIVEN_BY]->(d) AND r.position = 1 AND d.nationality = c.country WITH d.driverId RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins;"
  },
  {
    "question": "List the constructors with more than 10 wins in a single season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 GROUP BY c.constructorId, ra.year HAVING COUNT(*) > 10 ORDER BY wins DESC;",
    "cypher": "MATCH (r:results), (c:constructors), (ra:races) WHERE (r)-[:BY_CONSTRUCTOR]->(c) AND (r)-[:IN_RACE]->(ra) AND r.position = 1 WITH c.constructorId, ra.year WITH COUNT(*) > 10 RETURN c.name, ra.year, count(r) AS wins ORDER BY wins;"
  },
  {
    "question": "Get the drivers who have finished second most often without winning a championship.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS second_places FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 2 GROUP BY d.driverId HAVING d.driverId NOT IN (SELECT ds.driverId FROM driverStandings ds JOIN races ra ON ds.raceId = ra.raceId WHERE ds.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year));",
    "cypher": "MATCH (r:results), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND r.position = 2 WITH d.driverId WITH d.driverId NOT IN (SELECT ds.driverId FROM driverStandings ds JOIN races ra ON ds.raceId = ra.raceId WHERE ds.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year)) RETURN d.forename, d.surname, count(r) AS second_places;"
  },
  {
    "question": "Find the average points per race for Max Verstappen in 2022.",
    "sql": "SELECT AVG(r.points) FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Max' AND d.surname = 'Verstappen' AND ra.year = 2022;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND d.forename = 'Max' AND d.surname = 'Verstappen' AND ra.year = 2022 RETURN AVG(r.points);"
  },
  {
    "question": "Show the constructors who have achieved at least 5 consecutive wins.",
    "sql": "SELECT DISTINCT c.name FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND EXISTS (SELECT 1 FROM races r1, races r2, races r3, races r4, races r5 WHERE r1.year = ra.year AND r2.year = ra.year AND r3.year = ra.year AND r4.year = ra.year AND r5.year = ra.year);",
    "cypher": "MATCH (c:constructors), (r:results), (ra:races) WHERE c.constructorId = r.constructorId AND (r)-[:IN_RACE]->(ra) AND r.position = 1 AND EXISTS (SELECT 1 FROM races r1, races r2, races r3, races r4, races r5 WHERE r1.year = ra.year AND r2.year = ra.year AND r3.year = ra.year AND r4.year = ra.year AND r5.year = ra.year) RETURN c.DISTINCT, c.name;"
  },
  {
    "question": "List the circuits where Ferrari has never won.",
    "sql": "SELECT DISTINCT c.name FROM circuits c WHERE c.circuitId NOT IN (SELECT ra.circuitId FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN constructors c2 ON r.constructorId = c2.constructorId WHERE c2.name = 'Ferrari' AND r.position = 1);",
    "cypher": "MATCH (c:circuits) WHERE c.circuitId NOT IN (SELECT ra.circuitId FROM results r JOIN races ra ON (r)-[:IN_RACE]->(ra) JOIN constructors c2 ON r.constructorId = c2.constructorId WHERE c2.name = 'Ferrari' AND r.position = 1) RETURN c.DISTINCT, c.name;"
  },
  {
    "question": "Find the longest winning streak by a driver.",
    "sql": "SELECT d.forename, d.surname, MAX(streak) AS longest_streak FROM (SELECT r.driverId, COUNT(*) AS streak FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 1 GROUP BY r.driverId) sub JOIN drivers d ON sub.driverId = d.driverId GROUP BY d.driverId ORDER BY longest_streak DESC LIMIT 1;",
    "cypher": "MATCH (r.driverId,:SELECT), (d:drivers) WHERE (r)-[:DRIVEN_BY]->(d) AND r.position = 1 WITH r.driverId) sub JOIN drivers d ON sub.driverId = d.driverId WITH d.driverId RETURN d.forename, d.surname, r.driverId,.MAX(streak) AS longest_streak ORDER BY r.driverId,.longest_streak;"
  },
  {
    "question": "Get the drivers with the most retirements in the 2000s.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS retirements FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year BETWEEN 2000 AND 2009 AND r.statusId != 1 GROUP BY d.driverId ORDER BY retirements DESC LIMIT 5;",
    "cypher": "MATCH (r:results), (ra:races), (d:drivers) WHERE (r)-[:IN_RACE]->(ra) AND (r)-[:DRIVEN_BY]->(d) AND ra.year >= 2000 AND ra.year <= 2009 AND r.statusId != 1 WITH d.driverId RETURN d.forename, d.surname, count(r) AS retirements ORDER BY r.retirements;"
  },
  {
    "question": "Which driver has the most podium finishes?",
    "sql": "SELECT d.forename, d.surname, COUNT(*) as podiums FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.position <= 3 GROUP BY d.driverId ORDER BY podiums DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers) WHERE r.position <= 3 RETURN d.forename, d.surname, count(r) as podiums ORDER BY podiums DESC LIMIT 1;"
  },
  {
    "question": "Which constructor has the most pole positions?",
    "sql": "SELECT c.name, COUNT(*) as poles FROM results r JOIN constructors c ON r.constructorId = c.constructorId WHERE r.grid = 1 GROUP BY c.constructorId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors) WHERE r.grid = 1 RETURN c.name, count(r) as poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most fastest laps.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) as fastest_laps FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.rank = 1 GROUP BY d.driverId ORDER BY fastest_laps DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers) WHERE r.rank = 1 RETURN d.forename, d.surname, count(r) as fastest_laps ORDER BY fastest_laps DESC LIMIT 1;"
  },
  {
    "question": "Show all races where Fernando Alonso finished on the podium.",
    "sql": "SELECT ra.year, ra.name FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Fernando' AND d.surname = 'Alonso' AND r.position <= 3;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE d.forename = 'Fernando' AND d.surname = 'Alonso' AND r.position <= 3 RETURN ra.year, ra.name;"
  },
  {
    "question": "Which driver has raced for the most constructors?",
    "sql": "SELECT d.forename, d.surname, COUNT(DISTINCT r.constructorId) as constructors FROM results r JOIN drivers d ON r.driverId = d.driverId GROUP BY d.driverId ORDER BY constructors DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:BY_CONSTRUCTOR]->(c:constructors) RETURN d.forename, d.surname, count(DISTINCT c) as constructors ORDER BY constructors DESC LIMIT 1;"
  },
  {
    "question": "Show the circuits where Sebastian Vettel has won at least 3 times.",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Sebastian' AND d.surname = 'Vettel' AND r.position = 1 GROUP BY c.circuitId HAVING COUNT(*) >= 3;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races)-[:HELD_AT]->(c:circuits) WHERE d.forename = 'Sebastian' AND d.surname = 'Vettel' AND r.position = 1 RETURN c.name, count(r) AS wins WITH count(r) >= 3;"
  },
  {
    "question": "Find the driver with the most third-place finishes.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS third_places FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.position = 3 GROUP BY d.driverId ORDER BY third_places DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers) WHERE r.position = 3 RETURN d.forename, d.surname, count(r) AS third_places ORDER BY third_places DESC LIMIT 1;"
  },
  {
    "question": "Find the constructor with the most 1-2 finishes (first and second).",
    "sql": "SELECT c.name, COUNT(*) AS one_two FROM results r1 JOIN results r2 ON r1.raceId = r2.raceId AND r1.constructorId = r2.constructorId JOIN constructors c ON r1.constructorId = c.constructorId WHERE r1.position = 1 AND r2.position = 2 GROUP BY c.constructorId ORDER BY one_two DESC LIMIT 1;",
    "cypher": "MATCH (r1:results)-[:BY_CONSTRUCTOR]->(c:constructors), (r2:results)-[:BY_CONSTRUCTOR]->(c) WHERE r1.raceId = r2.raceId AND r1.position = 1 AND r2.position = 2 RETURN c.name, count(*) AS one_two ORDER BY one_two DESC LIMIT 1;"
  },
  {
    "question": "List drivers with more than 200 career starts.",
    "sql": "SELECT d.forename, d.surname, COUNT(DISTINCT ra.raceId) AS starts FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) > 200;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) RETURN d.forename, d.surname, count(DISTINCT ra) AS starts WITH count(DISTINCT ra) > 200;"
  },
  {
    "question": "Get the season with the closest championship (smallest points gap).",
    "sql": "SELECT ra.year, MIN(ds1.points - ds2.points) AS gap FROM driverStandings ds1 JOIN driverStandings ds2 ON ds1.raceId = ds2.raceId AND ds1.position = 1 AND ds2.position = 2 JOIN races ra ON ds1.raceId = ra.raceId GROUP BY ra.year ORDER BY gap ASC LIMIT 1;",
    "cypher": "MATCH (ds1:driverStandings)-[:IN_RACE]->(ra:races), (ds2:driverStandings)-[:IN_RACE]->(ra) WHERE ds1.position = 1 AND ds2.position = 2 RETURN ra.year, MIN(ds1.points - ds2.points) AS gap ORDER BY gap ASC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most wins in 2000.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2000 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2000 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most wins in 2004.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2004 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2004 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most wins in 2008.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2008 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2008 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most wins in 2012.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2012 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2012 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most wins in 2016.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2016 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2016 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most wins in 2020.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2020 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers), (r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2020 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "List the drivers with at least 5 podiums in a season.",
    "sql": "SELECT d.forename, d.surname, ra.year, COUNT(*) AS podiums FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position <= 3 GROUP BY d.driverId, ra.year HAVING COUNT(*) >= 5;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE r.position <= 3 RETURN d.forename, d.surname, ra.year, count(r) AS podiums WITH count(r) >= 5;"
  },
  {
    "question": "List the drivers with at least 8 podiums in a season.",
    "sql": "SELECT d.forename, d.surname, ra.year, COUNT(*) AS podiums FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position <= 3 GROUP BY d.driverId, ra.year HAVING COUNT(*) >= 8;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE r.position <= 3 RETURN d.forename, d.surname, ra.year, count(r) AS podiums WITH count(r) >= 8;"
  },
  {
    "question": "List the drivers with at least 10 podiums in a season.",
    "sql": "SELECT d.forename, d.surname, ra.year, COUNT(*) AS podiums FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.position <= 3 GROUP BY d.driverId, ra.year HAVING COUNT(*) >= 10;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE r.position <= 3 RETURN d.forename, d.surname, ra.year, count(r) AS podiums WITH count(r) >= 10;"
  },
  {
    "question": "Which constructor had the most wins in 2000?",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2000 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2000 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most wins in 2004?",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2004 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2004 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most wins in 2008?",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2008 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2008 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most wins in 2012?",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2012 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2012 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most wins in 2016?",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2016 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2016 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most wins in 2020?",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 1 AND ra.year = 2020 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position = 1 AND ra.year = 2020 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find constructors with at least 5 podiums in a season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS podiums FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position <= 3 GROUP BY c.constructorId, ra.year HAVING COUNT(*) >= 5;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position <= 3 RETURN c.name, ra.year, count(r) AS podiums WITH count(r) >= 5;"
  },
  {
    "question": "Find constructors with at least 8 podiums in a season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS podiums FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position <= 3 GROUP BY c.constructorId, ra.year HAVING COUNT(*) >= 8;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position <= 3 RETURN c.name, ra.year, count(r) AS podiums WITH count(r) >= 8;"
  },
  {
    "question": "Find constructors with at least 10 podiums in a season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS podiums FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE r.position <= 3 GROUP BY c.constructorId, ra.year HAVING COUNT(*) >= 10;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE r.position <= 3 RETURN c.name, ra.year, count(r) AS podiums WITH count(r) >= 10;"
  },
  {
    "question": "Which circuit hosted the most races in the 1980s?",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races ra JOIN circuits c ON ra.circuitId = c.circuitId WHERE ra.year BETWEEN 1980 AND 1980+9 GROUP BY c.circuitId ORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) WHERE ra.year >= 1980 AND ra.year <= 1980+9 RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC LIMIT 1;"
  },
  {
    "question": "Which circuit hosted the most races in the 1990s?",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races ra JOIN circuits c ON ra.circuitId = c.circuitId WHERE ra.year BETWEEN 1990 AND 1990+9 GROUP BY c.circuitId ORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) WHERE ra.year >= 1990 AND ra.year <= 1990+9 RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC LIMIT 1;"
  },
  {
    "question": "Which circuit hosted the most races in the 2000s?",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races ra JOIN circuits c ON ra.circuitId = c.circuitId WHERE ra.year BETWEEN 2000 AND 2000+9 GROUP BY c.circuitId ORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) WHERE ra.year >= 2000 AND ra.year <= 2000+9 RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC LIMIT 1;"
  },
  {
    "question": "Which circuit hosted the most races in the 2010s?",
    "sql": "SELECT c.name, COUNT(*) AS race_count FROM races ra JOIN circuits c ON ra.circuitId = c.circuitId WHERE ra.year BETWEEN 2010 AND 2010+9 GROUP BY c.circuitId ORDER BY race_count DESC LIMIT 1;",
    "cypher": "MATCH (ra:races)-[:HELD_AT]->(c:circuits) WHERE ra.year >= 2010 AND ra.year <= 2010+9 RETURN c.name, count(ra) AS race_count ORDER BY race_count DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who finished runner-up in the championship in 2000.",
    "sql": "SELECT d.forename, d.surname FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ra.year = 2000 AND ds.position = 2 AND ra.round = (SELECT MAX(round) FROM races WHERE year = 2000);",
    "cypher": "MATCH (ds:driverStandings)-[:IN_RACE]->(ra:races),(ds)-[:FOR_DRIVER]->(d:drivers) WHERE ra.year = 2000 AND ds.position = 2 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = 2000 | r2.round]) RETURN d.forename, d.surname;"
  },
  {
    "question": "Find the driver who finished runner-up in the championship in 2004.",
    "sql": "SELECT d.forename, d.surname FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ra.year = 2004 AND ds.position = 2 AND ra.round = (SELECT MAX(round) FROM races WHERE year = 2004);",
    "cypher": "MATCH (ds:driverStandings)-[:IN_RACE]->(ra:races),(ds)-[:FOR_DRIVER]->(d:drivers) WHERE ra.year = 2004 AND ds.position = 2 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = 2004 | r2.round]) RETURN d.forename, d.surname;"
  },
  {
    "question": "Find the driver who finished runner-up in the championship in 2008.",
    "sql": "SELECT d.forename, d.surname FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ra.year = 2008 AND ds.position = 2 AND ra.round = (SELECT MAX(round) FROM races WHERE year = 2008);",
    "cypher": "MATCH (ds:driverStandings)-[:IN_RACE]->(ra:races),(ds)-[:FOR_DRIVER]->(d:drivers) WHERE ra.year = 2008 AND ds.position = 2 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = 2008 | r2.round]) RETURN d.forename, d.surname;"
  },
  {
    "question": "Find the driver who finished runner-up in the championship in 2012.",
    "sql": "SELECT d.forename, d.surname FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ra.year = 2012 AND ds.position = 2 AND ra.round = (SELECT MAX(round) FROM races WHERE year = 2012);",
    "cypher": "MATCH (ds:driverStandings)-[:IN_RACE]->(ra:races),(ds)-[:FOR_DRIVER]->(d:drivers) WHERE ra.year = 2012 AND ds.position = 2 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = 2012 | r2.round]) RETURN d.forename, d.surname;"
  },
  {
    "question": "Find the driver who finished runner-up in the championship in 2016.",
    "sql": "SELECT d.forename, d.surname FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ra.year = 2016 AND ds.position = 2 AND ra.round = (SELECT MAX(round) FROM races WHERE year = 2016);",
    "cypher": "MATCH (ds:driverStandings)-[:IN_RACE]->(ra:races),(ds)-[:FOR_DRIVER]->(d:drivers) WHERE ra.year = 2016 AND ds.position = 2 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = 2016 | r2.round]) RETURN d.forename, d.surname;"
  },
  {
    "question": "Find the driver who finished runner-up in the championship in 2020.",
    "sql": "SELECT d.forename, d.surname FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races ra ON ds.raceId = ra.raceId WHERE ra.year = 2020 AND ds.position = 2 AND ra.round = (SELECT MAX(round) FROM races WHERE year = 2020);",
    "cypher": "MATCH (ds:driverStandings)-[:IN_RACE]->(ra:races),(ds)-[:FOR_DRIVER]->(d:drivers) WHERE ra.year = 2020 AND ds.position = 2 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = 2020 | r2.round]) RETURN d.forename, d.surname;"
  },
  {
    "question": "Find the driver with the most pole positions in 1995.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS poles FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE q.position = 1 AND ra.year = 1995 GROUP BY d.driverId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying)-[:FOR_DRIVER]->(d:drivers),(q)-[:FOR_RACE]->(ra:races) WHERE q.position = 1 AND ra.year = 1995 RETURN d.forename, d.surname, count(q) AS poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most pole positions in 2000.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS poles FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE q.position = 1 AND ra.year = 2000 GROUP BY d.driverId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying)-[:FOR_DRIVER]->(d:drivers),(q)-[:FOR_RACE]->(ra:races) WHERE q.position = 1 AND ra.year = 2000 RETURN d.forename, d.surname, count(q) AS poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most pole positions in 2005.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS poles FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE q.position = 1 AND ra.year = 2005 GROUP BY d.driverId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying)-[:FOR_DRIVER]->(d:drivers),(q)-[:FOR_RACE]->(ra:races) WHERE q.position = 1 AND ra.year = 2005 RETURN d.forename, d.surname, count(q) AS poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most pole positions in 2010.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS poles FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE q.position = 1 AND ra.year = 2010 GROUP BY d.driverId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying)-[:FOR_DRIVER]->(d:drivers),(q)-[:FOR_RACE]->(ra:races) WHERE q.position = 1 AND ra.year = 2010 RETURN d.forename, d.surname, count(q) AS poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most pole positions in 2015.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS poles FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE q.position = 1 AND ra.year = 2015 GROUP BY d.driverId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying)-[:FOR_DRIVER]->(d:drivers),(q)-[:FOR_RACE]->(ra:races) WHERE q.position = 1 AND ra.year = 2015 RETURN d.forename, d.surname, count(q) AS poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most pole positions in 2020.",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS poles FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races ra ON q.raceId = ra.raceId WHERE q.position = 1 AND ra.year = 2020 GROUP BY d.driverId ORDER BY poles DESC LIMIT 1;",
    "cypher": "MATCH (q:qualifying)-[:FOR_DRIVER]->(d:drivers),(q)-[:FOR_RACE]->(ra:races) WHERE q.position = 1 AND ra.year = 2020 RETURN d.forename, d.surname, count(q) AS poles ORDER BY poles DESC LIMIT 1;"
  },
  {
    "question": "Which drivers scored points in every race in 1995?",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 1995 AND r.points > 0 GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = 1995);",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 1995 AND r.points > 0 RETURN d.forename, d.surname WITH count(DISTINCT ra) = size([(ra2:races) WHERE ra2.year = 1995 | ra2]);"
  },
  {
    "question": "Which drivers scored points in every race in 2000?",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2000 AND r.points > 0 GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = 2000);",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2000 AND r.points > 0 RETURN d.forename, d.surname WITH count(DISTINCT ra) = size([(ra2:races) WHERE ra2.year = 2000 | ra2]);"
  },
  {
    "question": "Which drivers scored points in every race in 2005?",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2005 AND r.points > 0 GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = 2005);",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2005 AND r.points > 0 RETURN d.forename, d.surname WITH count(DISTINCT ra) = size([(ra2:races) WHERE ra2.year = 2005 | ra2]);"
  },
  {
    "question": "Which drivers scored points in every race in 2010?",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2010 AND r.points > 0 GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = 2010);",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2010 AND r.points > 0 RETURN d.forename, d.surname WITH count(DISTINCT ra) = size([(ra2:races) WHERE ra2.year = 2010 | ra2]);"
  },
  {
    "question": "Which drivers scored points in every race in 2015?",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2015 AND r.points > 0 GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = 2015);",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2015 AND r.points > 0 RETURN d.forename, d.surname WITH count(DISTINCT ra) = size([(ra2:races) WHERE ra2.year = 2015 | ra2]);"
  },
  {
    "question": "Which drivers scored points in every race in 2020?",
    "sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2020 AND r.points > 0 GROUP BY d.driverId HAVING COUNT(DISTINCT ra.raceId) = (SELECT COUNT(*) FROM races WHERE year = 2020);",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2020 AND r.points > 0 RETURN d.forename, d.surname WITH count(DISTINCT ra) = size([(ra2:races) WHERE ra2.year = 2020 | ra2]);"
  },
  {
    "question": "Which constructor had the most retirements in 1995?",
    "sql": "SELECT c.name, COUNT(*) AS retirements FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 1995 AND r.statusId != 1 GROUP BY c.constructorId ORDER BY retirements DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 1995 AND r.statusId <> 1 RETURN c.name, count(r) AS retirements ORDER BY retirements DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most retirements in 2000?",
    "sql": "SELECT c.name, COUNT(*) AS retirements FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2000 AND r.statusId != 1 GROUP BY c.constructorId ORDER BY retirements DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2000 AND r.statusId <> 1 RETURN c.name, count(r) AS retirements ORDER BY retirements DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most retirements in 2005?",
    "sql": "SELECT c.name, COUNT(*) AS retirements FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2005 AND r.statusId != 1 GROUP BY c.constructorId ORDER BY retirements DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2005 AND r.statusId <> 1 RETURN c.name, count(r) AS retirements ORDER BY retirements DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most retirements in 2010?",
    "sql": "SELECT c.name, COUNT(*) AS retirements FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2010 AND r.statusId != 1 GROUP BY c.constructorId ORDER BY retirements DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2010 AND r.statusId <> 1 RETURN c.name, count(r) AS retirements ORDER BY retirements DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most retirements in 2015?",
    "sql": "SELECT c.name, COUNT(*) AS retirements FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2015 AND r.statusId != 1 GROUP BY c.constructorId ORDER BY retirements DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2015 AND r.statusId <> 1 RETURN c.name, count(r) AS retirements ORDER BY retirements DESC LIMIT 1;"
  },
  {
    "question": "Which constructor had the most retirements in 2020?",
    "sql": "SELECT c.name, COUNT(*) AS retirements FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2020 AND r.statusId != 1 GROUP BY c.constructorId ORDER BY retirements DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r)-[:IN_RACE]->(ra:races) WHERE ra.year = 2020 AND r.statusId <> 1 RETURN c.name, count(r) AS retirements ORDER BY retirements DESC LIMIT 1;"
  },
  {
    "question": "Find constructors who achieved 1-2 finishes at least 2 times in a season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS one_twos FROM results r1 JOIN results r2 ON r1.raceId = r2.raceId AND r1.constructorId = r2.constructorId JOIN constructors c ON r1.constructorId = c.constructorId JOIN races ra ON r1.raceId = ra.raceId WHERE r1.position = 1 AND r2.position = 2 GROUP BY c.constructorId, ra.year HAVING COUNT(*) >= 2;",
    "cypher": "MATCH (r1:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r2:results)-[:BY_CONSTRUCTOR]->(c),(r1)-[:IN_RACE]->(ra:races),(r2)-[:IN_RACE]->(ra) WHERE r1.position = 1 AND r2.position = 2 RETURN c.name, ra.year, count(*) AS one_twos WITH count(*) >= 2;"
  },
  {
    "question": "Find constructors who achieved 1-2 finishes at least 3 times in a season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS one_twos FROM results r1 JOIN results r2 ON r1.raceId = r2.raceId AND r1.constructorId = r2.constructorId JOIN constructors c ON r1.constructorId = c.constructorId JOIN races ra ON r1.raceId = ra.raceId WHERE r1.position = 1 AND r2.position = 2 GROUP BY c.constructorId, ra.year HAVING COUNT(*) >= 3;",
    "cypher": "MATCH (r1:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r2:results)-[:BY_CONSTRUCTOR]->(c),(r1)-[:IN_RACE]->(ra:races),(r2)-[:IN_RACE]->(ra) WHERE r1.position = 1 AND r2.position = 2 RETURN c.name, ra.year, count(*) AS one_twos WITH count(*) >= 3;"
  },
  {
    "question": "Find constructors who achieved 1-2 finishes at least 5 times in a season.",
    "sql": "SELECT c.name, ra.year, COUNT(*) AS one_twos FROM results r1 JOIN results r2 ON r1.raceId = r2.raceId AND r1.constructorId = r2.constructorId JOIN constructors c ON r1.constructorId = c.constructorId JOIN races ra ON r1.raceId = ra.raceId WHERE r1.position = 1 AND r2.position = 2 GROUP BY c.constructorId, ra.year HAVING COUNT(*) >= 5;",
    "cypher": "MATCH (r1:results)-[:BY_CONSTRUCTOR]->(c:constructors),(r2:results)-[:BY_CONSTRUCTOR]->(c),(r1)-[:IN_RACE]->(ra:races),(r2)-[:IN_RACE]->(ra) WHERE r1.position = 1 AND r2.position = 2 RETURN c.name, ra.year, count(*) AS one_twos WITH count(*) >= 5;"
  },
  {
    "question": "Which driver has the most wins at the Monaco Grand Prix?",
    "sql": "SELECT d.forename, d.surname, COUNT(*) AS wins FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId WHERE c.name LIKE '%Monaco%' AND r.position = 1 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races)-[:HELD_AT]->(c:circuits) WHERE c.name CONTAINS 'Monaco' AND r.position = 1 RETURN d.forename, d.surname, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Find the circuit where Ferrari has the most wins.",
    "sql": "SELECT c.name, COUNT(*) AS wins FROM results r JOIN constructors c2 ON r.constructorId = c2.constructorId JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId WHERE c2.name = 'Ferrari' AND r.position = 1 GROUP BY c.circuitId ORDER BY wins DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:BY_CONSTRUCTOR]->(c2:constructors),(r)-[:IN_RACE]->(ra:races)-[:HELD_AT]->(c:circuits) WHERE c2.name = 'Ferrari' AND r.position = 1 RETURN c.name, count(r) AS wins ORDER BY wins DESC LIMIT 1;"
  },
  {
    "question": "Which driver has the most consecutive podium finishes?",
    "sql": "SELECT d.forename, d.surname, MAX(streak) AS max_streak FROM (SELECT r.driverId, COUNT(*) AS streak FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.position <= 3 GROUP BY r.driverId) sub JOIN drivers d ON sub.driverId = d.driverId GROUP BY d.driverId ORDER BY max_streak DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers) WHERE r.position <= 3 RETURN d.forename, d.surname, MAX(count(r)) AS max_streak ORDER BY max_streak DESC LIMIT 1;"
  },
  {
    "question": "Find the driver with the most points in a single season.",
    "sql": "SELECT d.forename, d.surname, ra.year, SUM(r.points) AS total_points FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId GROUP BY d.driverId, ra.year ORDER BY total_points DESC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) RETURN d.forename, d.surname, ra.year, SUM(r.points) AS total_points ORDER BY total_points DESC LIMIT 1;"
  },
  {
    "question": "Which constructor has the most championships overall?",
    "sql": "SELECT c.name, COUNT(*) AS championships FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId JOIN races ra ON cs.raceId = ra.raceId WHERE cs.position = 1 AND ra.round = (SELECT MAX(round) FROM races WHERE year = ra.year) GROUP BY c.constructorId ORDER BY championships DESC LIMIT 1;",
    "cypher": "MATCH (cs:constructorStandings)-[:FOR_CONSTRUCTOR]->(c:constructors),(cs)-[:IN_RACE]->(ra:races) WHERE cs.position = 1 AND ra.round = apoc.coll.max([(r2:races) WHERE r2.year = ra.year | r2.round]) RETURN c.name, count(cs) AS championships ORDER BY championships DESC LIMIT 1;"
  },
  {
    "question": "Find the driver who debuted earliest in F1 history.",
    "sql": "SELECT d.forename, d.surname, MIN(ra.year) AS debut_year FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId GROUP BY d.driverId ORDER BY debut_year ASC LIMIT 1;",
    "cypher": "MATCH (r:results)-[:DRIVEN_BY]->(d:drivers),(r)-[:IN_RACE]->(ra:races) RETURN d.forename, d.surname, MIN(ra.year) AS debut_year ORDER BY debut_year ASC LIMIT 1;"
  }
]